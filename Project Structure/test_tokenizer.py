import unittest

from modules.metadata import metadata
from modules.tokenizer import tokenizer


class TokenizerTestCase(unittest.TestCase):
    def test_tokenizer(self):
        # Test case 1
        input_data = metadata({"doc": "file.docx"})
        expected_output = {
            "metadata": {
                "author": "Johan Venter",
                "category": "",
                "comments": "",
                "content_status": "",
                "created": "2024-02-27T20:16:00",
                "identifier": "",
                "keywords": "",
                "language": "",
                "last_modified_by": "Johan Venter",
                "last_printed": None,
                "modified": "2024-02-27T21:09:00",
                "revision": 10,
                "subject": "",
                "title": "",
                "version": "",
                "name": "file.docx",
                "paragraphs": [
                    "Assignment 1",
                    "Part 1",
                    "Create a Java program that achieves the following:",
                    "Create a file Question1.java.",
                    "Ask the user for their name.",
                    "Ask the user for their surname.",
                    "Print their initials: Extract the first character of the name and surname, capitalize each extracted character and print their initials (separated with a full-stop).",
                    "Hint: Use JavaDocs",
                    "Start with this class:",
                    "",
                    "Example Output:",
                    "",
                    "Add your Name, Surname, and student number at the beginning of the Java file as a Java comment.",
                    "Create a new Folder called Assignment 1 Save your file as Question1.java.",
                    "Part 2",
                    "Create a new file called Question2.java and save it in the same folder.",
                    "Add a constructor method to the Question2 class that takes a String message as input and saves it to a private class field: message.",
                    "Add a function called printMessage() that takes zero arguments, returns void and prints the message to the console.",
                    "Add the main function where you will create 2 instances of the Question2 class, each with different values.",
                    "Finally, call the toString method on each of the instances and print their results to the console.",
                    "Add your Name, Surname, and student number at the beginning of the Java file as a Java comment.",
                    "Save your files. Zip the Assignment 1 folder and submit to eFundi.",
                    "",
                    "",
                    "Rubric",
                    "",
                ],
                "text": "Assignment 1 Part 1 Create a Java program that achieves the following: Create a file Question1.java. Ask the user for their name. Ask the user for their surname. Print their initials: Extract the first character of the name and surname, capitalize each extracted character and print their initials (separated with a full-stop). Hint: Use JavaDocs Start with this class:  Example Output:  Add your Name, Surname, and student number at the beginning of the Java file as a Java comment. Create a new Folder called Assignment 1 Save your file as Question1.java. Part 2 Create a new file called Question2.java and save it in the same folder. Add a constructor method to the Question2 class that takes a String message as input and saves it to a private class field: message. Add a function called printMessage() that takes zero arguments, returns void and prints the message to the console. Add the main function where you will create 2 instances of the Question2 class, each with different values. Finally, call the toString method on each of the instances and print their results to the console. Add your Name, Surname, and student number at the beginning of the Java file as a Java comment. Save your files. Zip the Assignment 1 folder and submit to eFundi.   Rubric ",
            },
            "tokens": [
                "assignment",
                "1",
                "part",
                "1",
                "create",
                "a",
                "java",
                "program",
                "that",
                "achieves",
                "the",
                "following",
                "create",
                "a",
                "file",
                "question1java",
                "ask",
                "the",
                "user",
                "for",
                "their",
                "name",
                "ask",
                "the",
                "user",
                "for",
                "their",
                "surname",
                "print",
                "their",
                "initials",
                "extract",
                "the",
                "first",
                "character",
                "of",
                "the",
                "name",
                "and",
                "surname",
                "capitalize",
                "each",
                "extracted",
                "character",
                "and",
                "print",
                "their",
                "initials",
                "separated",
                "with",
                "a",
                "fullstop",
                "hint",
                "use",
                "javadocs",
                "start",
                "with",
                "this",
                "class",
                "example",
                "output",
                "add",
                "your",
                "name",
                "surname",
                "and",
                "student",
                "number",
                "at",
                "the",
                "beginning",
                "of",
                "the",
                "java",
                "file",
                "as",
                "a",
                "java",
                "comment",
                "create",
                "a",
                "new",
                "folder",
                "called",
                "assignment",
                "1",
                "save",
                "your",
                "file",
                "as",
                "question1java",
                "part",
                "2",
                "create",
                "a",
                "new",
                "file",
                "called",
                "question2java",
                "and",
                "save",
                "it",
                "in",
                "the",
                "same",
                "folder",
                "add",
                "a",
                "constructor",
                "method",
                "to",
                "the",
                "question2",
                "class",
                "that",
                "takes",
                "a",
                "string",
                "message",
                "as",
                "input",
                "and",
                "saves",
                "it",
                "to",
                "a",
                "private",
                "class",
                "field",
                "message",
                "add",
                "a",
                "function",
                "called",
                "printmessage",
                "that",
                "takes",
                "zero",
                "arguments",
                "returns",
                "void",
                "and",
                "prints",
                "the",
                "message",
                "to",
                "the",
                "console",
                "add",
                "the",
                "main",
                "function",
                "where",
                "you",
                "will",
                "create",
                "2",
                "instances",
                "of",
                "the",
                "question2",
                "class",
                "each",
                "with",
                "different",
                "values",
                "finally",
                "call",
                "the",
                "tostring",
                "method",
                "on",
                "each",
                "of",
                "the",
                "instances",
                "and",
                "print",
                "their",
                "results",
                "to",
                "the",
                "console",
                "add",
                "your",
                "name",
                "surname",
                "and",
                "student",
                "number",
                "at",
                "the",
                "beginning",
                "of",
                "the",
                "java",
                "file",
                "as",
                "a",
                "java",
                "comment",
                "save",
                "your",
                "files",
                "zip",
                "the",
                "assignment",
                "1",
                "folder",
                "and",
                "submit",
                "to",
                "efundi",
                "rubric",
            ],
        }
        self.assertEqual(tokenizer(input_data), expected_output)
        # Add more test cases


if __name__ == "__main__":
    unittest.main()
